---
import IconRocket from "./icons/IconRocket.astro";
import IconMessage from "./icons/IconMessage.astro";
import IconChart from "./icons/IconChart.astro";
import IconUsers from "./icons/IconUsers.astro";
import IconDiamond from "./icons/IconDiamond.astro"; // Puedes crear este icono para "Facturación Inteligente"

const benefitsData = [
  {
    icon: IconRocket,
    title: "Automatización inteligente",
    description:
      "Automatiza tus ventas y gestión comercial en WhatsApp con IA, ahorrando tiempo y recursos.",
    color: "bg-blue-50 ",
    iconBg: "bg-blue-100 ",
  },
  {
    icon: IconMessage,
    title: "Respuestas automáticas",
    description:
      "Responde consultas y gestiona pedidos automáticamente, mejorando la experiencia del cliente.",
    color: "bg-emerald-50 ",
    iconBg: "bg-emerald-100 ",
  },
  {
    icon: IconChart,
    title: "Análisis de datos",
    description:
      "Obtén insights valiosos sobre tus ventas y clientes para tomar mejores decisiones.",
    color: "bg-purple-50 ",
    iconBg: "bg-purple-100 ",
  },
  {
    icon: IconUsers,
    title: "Gestión de clientes",
    description:
      "Organiza y segmenta tus clientes para ofrecer una atención personalizada y efectiva.",
    color: "bg-amber-50 ",
    iconBg: "bg-amber-100 ",
  },
  {
    icon: IconDiamond,
    title: "Facturación Inteligente",
    description:
      "Factura en segundos, sin dolores de cabeza. Cumple con todas las normas locales y olvídate de la pérdida de tiempo.",
    color: "bg-blue-50 ",
    iconBg: "bg-blue-100 ",
  },
];
---

<section id="beneficios" class="py-24 px-4 bg-white">
  <div class="container mx-auto max-w-8xl">
    <div class="text-center mb-16 animate-on-scroll">
      <h2 class="text-3xl md:text-5xl font-bold mb-4 font-poppins">
        Beneficios que transforman tu negocio
      </h2>
      <p class="text-gray-600 text-lg max-w-3xl mx-auto">
        YoCobro no solo automatiza tus ventas, sino que transforma completamente
        tu operación para hacerla más eficiente y rentable.
      </p>
    </div>

    <div
      class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8 benefits-grid-container"
    >
      {
        benefitsData.map((benefit, index) => (
          <div
            class:list={[
              benefit.color,
              "rounded-xl p-6 border border-gray-100 hover:shadow-lg transition-all duration-300 group",
              "benefit-card",
            ]}
            data-stagger-index={index}
          >
            <div
              class:list={[
                benefit.iconBg,
                "rounded-full w-16 h-16 flex items-center justify-center mb-6 mx-auto group-hover:scale-110 transition-transform duration-300",
              ]}
            >
              <benefit.icon />
            </div>
            <h3 class="text-xl font-bold text-center mb-3">{benefit.title}</h3>
            <p class="text-gray-600 text-center">{benefit.description}</p>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  @media (min-width: 754px) and (max-width: 1018px) {
    .benefits-grid-container {
      grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
    }
    .benefits-grid-container > .benefit-card:last-child {
      grid-column: 1 / span 2 !important;
      justify-self: center !important;
      max-width: 350px;
    }
  }
  /* Estilos para la animación del bloque de título */
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.5s ease-out,
      transform 0.5s ease-out;
  }
  .animate-on-scroll.is-visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Estilos para la animación de las tarjetas de beneficio (staggered) */
  .benefit-card {
    opacity: 0;
    transform: translateY(20px);
    transition-property: opacity, transform;
    transition-duration: 0.5s; /* Duración de la animación de cada tarjeta */
    transition-timing-function: ease-out;
    /* El transition-delay se aplicará dinámicamente con JS */
  }

  .benefit-card.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const observerOptions: IntersectionObserverInit = {
      root: null,
      rootMargin: "0px",
      threshold: 0.1, // Animar cuando el 10% del elemento es visible
    };

    // Animación para el bloque de título
    const titleBlock = document.querySelector(".animate-on-scroll");
    if (titleBlock) {
      const titleObserver = new IntersectionObserver(
        (
          entries: IntersectionObserverEntry[],
          observer: IntersectionObserver
        ) => {
          entries.forEach((entry: IntersectionObserverEntry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("is-visible");
              observer.unobserve(entry.target); // Animar solo una vez
            }
          });
        },
        observerOptions
      );
      titleObserver.observe(titleBlock);
    }

    // Animación para el grid de beneficios (staggered)
    const benefitsContainer = document.querySelector(
      ".benefits-grid-container"
    );
    if (benefitsContainer) {
      const benefitCards =
        benefitsContainer.querySelectorAll<HTMLElement>(".benefit-card");
      const staggerDelayBase = 100; // 0.1 segundos, igual a staggerChildren: 0.1

      const benefitsObserver = new IntersectionObserver(
        (
          entries: IntersectionObserverEntry[],
          observer: IntersectionObserver
        ) => {
          entries.forEach((entry: IntersectionObserverEntry) => {
            if (entry.isIntersecting) {
              benefitCards.forEach((card: HTMLElement) => {
                const indexAttr = card.dataset.staggerIndex;
                const index = indexAttr ? parseInt(indexAttr) : 0;
                const delay = index * staggerDelayBase;

                setTimeout(() => {
                  card.style.transitionDelay = `${delay}ms`; // Aplica el delay dinámicamente
                  card.classList.add("is-visible");
                }, 0); // setTimeout con 0ms para asegurar que el delay se aplique antes de la transición
              });
              observer.unobserve(entry.target); // Observar el contenedor solo una vez
            }
          });
        },
        { ...observerOptions, threshold: 0.05 }
      ); // Umbral más bajo para el contenedor
      benefitsObserver.observe(benefitsContainer);
    }
  });
</script>
